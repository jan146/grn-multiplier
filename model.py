import numpy as np 

def solve_model(T,state):
    CSM_A1, CSM_A0, CSM_B1, CSM_B0, CSM_P3, CSM_P2, CSM_P1, CSM_P0, CSM_PP00, CSM_PP01, CSM_PP10, CSM_PP11, FA0_A, FA0_B, FA0_Cin, FA0_S, FA0_Cout, FA1_A, FA1_B, FA1_Cin, FA1_S, FA1_Cout = state
    dCSM_A1 = -CSM_A1*0
    dCSM_A0 = -CSM_A0*0
    dCSM_B1 = -CSM_B1*0
    dCSM_B0 = -CSM_B0*0
    dCSM_P3 = -CSM_P3*0.1+10*(((FA1_Cout/5)**2))/(1+((FA1_Cout/5)**2))
    dCSM_P2 = -CSM_P2*0.1+10*(((FA1_S/5)**2))/(1+((FA1_S/5)**2))
    dCSM_P1 = -CSM_P1*0.1+10*(((FA0_S/5)**2))/(1+((FA0_S/5)**2))
    dCSM_P0 = -CSM_P0*0.1+10*(((CSM_PP00/5)**2))/(1+((CSM_PP00/5)**2))
    dCSM_PP00 = -CSM_PP00*0.1+10*(((CSM_A0/5)**2)*((CSM_B0/5)**2))/(1+((CSM_A0/5)**2)+((CSM_B0/5)**2)+((CSM_A0/5)**2)*((CSM_B0/5)**2))
    dCSM_PP01 = -CSM_PP01*0.1+10*(((CSM_A0/5)**2)*((CSM_B1/5)**2))/(1+((CSM_A0/5)**2)+((CSM_B1/5)**2)+((CSM_A0/5)**2)*((CSM_B1/5)**2))
    dCSM_PP10 = -CSM_PP10*0.1+10*(((CSM_A1/5)**2)*((CSM_B0/5)**2))/(1+((CSM_A1/5)**2)+((CSM_B0/5)**2)+((CSM_A1/5)**2)*((CSM_B0/5)**2))
    dCSM_PP11 = -CSM_PP11*0.1+10*(((CSM_A1/5)**2)*((CSM_B1/5)**2))/(1+((CSM_A1/5)**2)+((CSM_B1/5)**2)+((CSM_A1/5)**2)*((CSM_B1/5)**2))
    dFA0_A = -FA0_A*0.1+10*(((CSM_PP10/5)**2))/(1+((CSM_PP10/5)**2))
    dFA0_B = -FA0_B*0.1+10*(((CSM_PP01/5)**2))/(1+((CSM_PP01/5)**2))
    dFA0_Cin = -FA0_Cin*0.1
    dFA0_S = -FA0_S*0.1+10*(((FA0_A/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_B/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_Cin/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))
    dFA0_Cout = -FA0_Cout*0.1+10*(((FA0_A/5)**2)*((FA0_B/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_A/5)**2)*((FA0_Cin/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_B/5)**2)*((FA0_Cin/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))+10*(((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))/(1+((FA0_A/5)**2)+((FA0_B/5)**2)+((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)+((FA0_A/5)**2)*((FA0_Cin/5)**2)+((FA0_B/5)**2)*((FA0_Cin/5)**2)+((FA0_A/5)**2)*((FA0_B/5)**2)*((FA0_Cin/5)**2))
    dFA1_A = -FA1_A*0.1+10*(((FA0_Cout/5)**2))/(1+((FA0_Cout/5)**2))
    dFA1_B = -FA1_B*0.1+10*(((CSM_PP11/5)**2))/(1+((CSM_PP11/5)**2))
    dFA1_Cin = -FA1_Cin*0.1
    dFA1_S = -FA1_S*0.1+10*(((FA1_A/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_B/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_Cin/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))
    dFA1_Cout = -FA1_Cout*0.1+10*(((FA1_A/5)**2)*((FA1_B/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_A/5)**2)*((FA1_Cin/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_B/5)**2)*((FA1_Cin/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))+10*(((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))/(1+((FA1_A/5)**2)+((FA1_B/5)**2)+((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)+((FA1_A/5)**2)*((FA1_Cin/5)**2)+((FA1_B/5)**2)*((FA1_Cin/5)**2)+((FA1_A/5)**2)*((FA1_B/5)**2)*((FA1_Cin/5)**2))
    return np.array([dCSM_A1, dCSM_A0, dCSM_B1, dCSM_B0, dCSM_P3, dCSM_P2, dCSM_P1, dCSM_P0, dCSM_PP00, dCSM_PP01, dCSM_PP10, dCSM_PP11, dFA0_A, dFA0_B, dFA0_Cin, dFA0_S, dFA0_Cout, dFA1_A, dFA1_B, dFA1_Cin, dFA1_S, dFA1_Cout])

def solve_model_steady(state):
    return solve_model(0, state)
